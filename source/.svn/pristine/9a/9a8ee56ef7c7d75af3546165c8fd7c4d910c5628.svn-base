using System;
using System.Collections.Generic;
using System.Globalization;
using org.ohdsi.cdm.framework.core.Base;
using org.ohdsi.cdm.framework.entities.Omop;

namespace org.ohdsi.cdm.builders.jmdc
{
	public class JmdcPersonBuilder : PersonBuilder
	{
		public JmdcPersonBuilder(ChunkBuilder chunkBuilder)
			: base(chunkBuilder)
		{
		}

		/*
		 *	Projects Enumeration of ConditionOccurrence from the raw set of ConditionOccurrence entities. 
		 *	During build:
		 *		override the condition's start date using the end date of the corresponding visit.
		 *		overide TypeConceptId per CDM Mapping spec. 
		 *	
		 */
		public override IEnumerable<ConditionOccurrence> BuildConditionOccurrences(ConditionOccurrence[] conditionOccurrences, Dictionary<long, VisitOccurrence> visitOccurrences, ObservationPeriod[] observationPeriods)
		{
			foreach (ConditionOccurrence co in conditionOccurrences)
			{
				VisitOccurrence v = visitOccurrences[co.VisitOccurrenceId.Value];
				co.StartDate = v.StartDate;
				int mflag = 0;
				int.TryParse(co.AdditionalFields["mflag"], out mflag);
				if (v.ConceptId == 9201)
				{
					co.TypeConceptId = mflag == 1 ? 38000183 : 38000184;
				}
				else
				{
					co.TypeConceptId = mflag == 1 ? 38000215 : 38000216;
				}
			}
			return base.BuildEntities(conditionOccurrences, visitOccurrences, observationPeriods);
		}

		/*
		 *	Projects Enumeration of ConditionOccurrence from the raw set of ConditionOccurrence entities. 
		 *	During build:
		 *		override the condition's start date using the end date of the corresponding visit.
		 *		overide TypeConceptId per CDM Mapping spec. 
		 *	
		 */

		public override IEnumerable<DrugExposure> BuildDrugExposures(DrugExposure[] drugExposures, Dictionary<long, VisitOccurrence> visitOccurrences, ObservationPeriod[] observationPeriods)
		{
			foreach (DrugExposure de in drugExposures)
			{
				VisitOccurrence v = null;
				int claimId = Int32.Parse(de.AdditionalFields["claim_id"]);
				int ymd_rx = Int32.Parse(de.AdditionalFields["ymd_rx"]);
				int ym_visit = Int32.Parse(de.AdditionalFields["ym_visit"]);

				visitOccurrences.TryGetValue(claimId,out v);

				// For clarity, we check v=null for each field that we need to populate based on the existance of the Visit Ocurrence
				// These could be collapsed into a single if (v != null) block, but would mix the rules for each field assignment together.  Clarity > performance
				
				// assign VisitOccurrenceId
				if (v != null)
				{
					de.VisitOccurrenceId = v.Id;
				}
				else
				{
					de.VisitOccurrenceId = null;
				}

				// assign Concept Type:
				if (v != null)
				{
					de.TypeConceptId = v.TypeConceptId == 9201 ? 38000180 : 38000179;
				}
				else
				{
					de.TypeConceptId = 8000175;
				}

				// set start date based on CDM Build spec
				DateTime drugDate;
				if (ymd_rx > 0) // use ymd_rx date as reference date.
					drugDate = DateTime.ParseExact(ymd_rx.ToString(), "yyyyMMdd", CultureInfo.InvariantCulture);
				else // use ym_visit as reference date.
					drugDate = DateTime.ParseExact(ym_visit.ToString(), "yyyyMM", CultureInfo.InvariantCulture);

				if (v != null) // claim exists
				{
					// use refrence date if it falls inside the visit start-end, else use visit end date.
					if (drugDate.Ticks >= v.StartDate.Ticks && drugDate.Ticks <= v.EndDate.Value.Ticks)
					{
						de.StartDate = drugDate;
					}
					else
					{
						de.StartDate = v.EndDate.Value;
					}
				}
				else
				{
					de.StartDate = drugDate;
				}

			}
			return base.BuildEntities(drugExposures, visitOccurrences, observationPeriods);
		}


		/*
		 *	Projects Enumeration of ProcedureOccurrence from the raw set of ProcedureOccurence entities. 
		 *	During build:
		 *		override the procedure's start date using the end date of the corresponding visit.
		 *		overide TypeConceptId per CDM Mapping spec. 
		 *	
		 */
		public override IEnumerable<ProcedureOccurrence> BuildProcedureOccurrences(ProcedureOccurrence[] procedureOccurrences, Dictionary<long, VisitOccurrence> visitOccurrences, ObservationPeriod[] observationPeriods)
		{
			foreach (ProcedureOccurrence po in procedureOccurrences)
			{
				VisitOccurrence v = visitOccurrences[po.VisitOccurrenceId.Value];
				po.StartDate = v.EndDate.Value;
				po.TypeConceptId = v.ConceptId == 9201 ? 38000249 : 38000267;
			}
			return base.BuildEntities(procedureOccurrences, visitOccurrences, observationPeriods);
		}
	}
}
